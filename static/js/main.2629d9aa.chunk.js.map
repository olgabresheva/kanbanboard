{"version":3,"sources":["TaskCard.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["TaskCard","props","leftBtn","className","width","height","viewBox","fill","xmlns","fillRule","d","rightBtn","deleteIcon","task","priority","name","onClick","onTaskDelete","id","onChangeStatus","direction","Column","filter","el","status","map","key","btnState","onBtnStateChange","uuidv4","App","initialtasks","useState","setTask","taskInput","setTaskInput","isOpenTaskForm","setIsOpenTaskForm","isActiveTaskCreateBtn","setIsActiveTaskCreateBtn","states","updatedTasks","indexOf","setBtnState","taskListAfterDelete","type","htmlFor","value","onChange","e","target","length","disabled","console","log","afterTaskAdded","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2629d9aa.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TaskCard(props) {\n\n    const leftBtn = (\n        <svg className=\"bi bi-arrow-left-circle\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n            <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n            <path fillRule=\"evenodd\"\n                  d=\"M8.354 11.354a.5.5 0 0 0 0-.708L5.707 8l2.647-2.646a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708 0z\"/>\n            <path fillRule=\"evenodd\" d=\"M11.5 8a.5.5 0 0 0-.5-.5H6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5z\"/>\n        </svg>);\n\n    const rightBtn = (\n        <svg className=\"bi bi-arrow-right-circle\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n            <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n            <path fillRule=\"evenodd\"\n                  d=\"M7.646 11.354a.5.5 0 0 1 0-.708L10.293 8 7.646 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0z\"/>\n            <path fillRule=\"evenodd\" d=\"M4.5 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5z\"/>\n        </svg>);\n\n    const deleteIcon = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                             xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n    </svg>);\n\n    return (\n        <div>\n            <div className=\"card\">\n                <div className=\"card-header bg-transparent border-success\">Priority: {props.task.priority}</div>\n                <div className=\"card-body\">\n                    <div>\n                        {props.task.name}\n                    </div>\n                    <div className=\"clearfix\">\n                        <span className=\"float-left\" onClick={() => props.onTaskDelete(props.task.id)}>{deleteIcon}</span>\n                        <span className=\"float-right\" onClick={() => props.onChangeStatus({id: props.task.id, direction: 'right'})}>{rightBtn}</span>\n                        <span className=\"float-right\"\n                              onClick={() => props.onChangeStatus({id: props.task.id, direction: 'left'})}\n                        >{leftBtn}</span>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default TaskCard;\n","import React from 'react';\nimport TaskCard from \"./TaskCard\";\n\nfunction Column(props) {\n\n\n    return (\n        <div>\n            {props.task\n                .filter(el => el.status === props.status)\n                .map(el => <TaskCard key={el.id} task={el} onChangeStatus={props.onChangeStatus}\n                                     btnState={props.btnState} onBtnStateChange={props.onBtnStateChange}\n                                     onTaskDelete={props.onTaskDelete}/>)\n            }\n\n\n        </div>\n    );\n}\n\nexport default Column;\n","import React, {useState} from 'react';\nimport Column from './Column';\nimport {v4 as uuidv4} from 'uuid';\n\nuuidv4(); // â‡¨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\nfunction App() {\n\n    const initialtasks = [\n        {\n            id: uuidv4(),\n            name: 'a1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n            priority: 'High',\n            status: 'To Do'\n        },\n        {\n            id: uuidv4(),\n            name: 'b2bbbbbbbbbbbbbbbbbbbbbbbbbb',\n            priority: 'Low',\n            status: 'To Do'\n        },\n        {\n            id: uuidv4(),\n            name: 'c3ccccccccccccccccccccccccc',\n            priority: 'Medium',\n            status: 'In Progress'\n        },\n        {\n            id: uuidv4(),\n            name: 'd4ddddddddddddddddddddddddd',\n            priority: 'High',\n            status: 'Done'\n        },\n        {\n            id: uuidv4(),\n            name: 'e5eeeeeeeeeeeeeeeeeeeeeeeeee',\n            priority: 'Medium',\n            status: 'In Review'\n        },\n    ]\n\n    const [task, setTask] = useState(initialtasks);\n\n    const [taskInput, setTaskInput] = useState('');\n    const [isOpenTaskForm, setIsOpenTaskForm] = useState(false);\n\n    const onClickCreateTask = () => {\n        setIsOpenTaskForm(true);\n    }\n\n    const onCreateTaskCancel = () => {\n        setIsOpenTaskForm(false);\n        setTaskInput('');\n        setIsActiveTaskCreateBtn(false);\n        setIsOpenTaskForm(false);\n    }\n\n    const [isActiveTaskCreateBtn, setIsActiveTaskCreateBtn] = useState(true);\n\n    const onInputChange = (e) => {\n        (setIsActiveTaskCreateBtn(e.target.value.length < 4));\n        setTaskInput(e.target.value);\n    }\n\n    const states = ['To Do', 'In Progress', 'In Review', 'Done'];\n\n    const onChangeStatus = ({id, direction}) => {\n        const updatedTasks = task.map(el => {\n            if (el.id === id) {\n                if (direction === 'left') {\n                    el.status = states[states.indexOf(el.status) - 1];\n                }\n                if (direction === 'right') {\n                    el.status = states[states.indexOf(el.status) + 1];\n                }\n                return el\n            } else return el;\n        });\n        setTask(updatedTasks);\n    };\n\n    const [btnState, setBtnState] = useState(true);\n\n    const onBtnStateChange = (id) => {\n        task.map(el => {\n            if (el.id === id && el.status === 'To Do') {\n                return setBtnState(false);\n            }\n        })\n    }\n\n    const onTaskDelete = (id) => {\n        const taskListAfterDelete = task.filter(el => el.id !== id);\n        setTask(taskListAfterDelete);\n    }\n\n    const onTaskCreate = (task) => {\n        console.log(task);\n        const afterTaskAdded = [...task];\n        afterTaskAdded.push({id: uuidv4(), name: task, priority: 'High', status: 'To Do'});\n        setTask(afterTaskAdded);\n    }\n\n    return (\n        <div>\n            <div className=\"container\">\n                <h1>Kanban</h1>\n\n                {!isOpenTaskForm &&\n                <button type=\"button\" className=\"btn btn-primary\" onClick={onClickCreateTask}>Create Task</button>}\n\n                {isOpenTaskForm &&\n                <form>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleInputTask\">Task</label>\n                        <input type=\"task\" className=\"form-control\" value={taskInput}\n                               onChange={onInputChange}/>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\"\n                            disabled={isActiveTaskCreateBtn}\n                            onClick={onTaskCreate}>\n                        Submit\n                    </button>\n                    <button type=\"cancel\" className=\"btn btn-secondary\" onClick={onCreateTaskCancel}>Cancel</button>\n                </form>\n                }\n                <p/>\n\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                            <h6>To Do</h6>\n                        </nav>\n                        <Column task={task} status='To Do' onChangeStatus={onChangeStatus}\n                                btnState={btnState} onBtnStateChange={onBtnStateChange}\n                                onTaskDelete={onTaskDelete}/>\n                    </div>\n                    <div className=\"col-sm\">\n                        <nav className=\"card\" className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                            <h6>In Progress</h6>\n                        </nav>\n                        <Column task={task} status='In Progress' onChangeStatus={onChangeStatus}\n                                btnState={btnState} onBtnStateChange={onBtnStateChange}\n                                onTaskDelete={onTaskDelete}/>\n                    </div>\n                    <div className=\"col-sm\">\n                        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                            <h6>In Review</h6>\n                        </nav>\n                        <Column task={task} status='In Review' onChangeStatus={onChangeStatus}\n                                btnState={btnState} onBtnStateChange={onBtnStateChange}\n                                onTaskDelete={onTaskDelete}/>\n                    </div>\n                    <div className=\"col-sm\">\n                        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                            <h6>Done</h6>\n                        </nav>\n                        <Column task={task} status='Done' onChangeStatus={onChangeStatus}\n                                btnState={btnState} onBtnStateChange={onBtnStateChange}\n                                onTaskDelete={onTaskDelete}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}